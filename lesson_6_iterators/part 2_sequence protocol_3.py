"""Реализуйте класс CyclicList, описывающий циклический список. При создании экземпляра класс должен принимать один аргумент:

iterable — итерируемый объект, определяющий начальный набор элементов циклического списка. Если не передан, начальный набор элементов считается пустым
Класс CyclicList должен иметь два метода экземпляра:

append() — метод, принимающий в качестве аргумента произвольный объект и добавляющий его в конец циклического списка
pop() — метод, который принимает в качестве аргумента индекс элемента циклического списка, возвращает его значение и удаляет из циклического списка элемент с данным индексом. Если аргумент не передан, возвращаемым и удаляемым элементом считается последний элемент циклического списка
При передаче экземпляра класса CyclicList в функцию len() должно возвращаться количество элементов в нем.

Также экземпляр класса CyclicList должен быть зацикленным итерируемым объектом. Другими словами, итерация по нему должна происходить бесконечно, и при каждом достижении его последнего элемента она должна начинаться сначала.

Наконец, экземпляр класса CyclicList должен позволять получать значения своих элементов с помощью индексов, при этом индексы должны работать циклически. Например, в циклическом списке [1, 2, 3] элементом с индексом 4 должно являться число 2."""

from itertools import cycle
from copy import copy

class CyclicList:
    def __init__(self, iterable=None):
        if iterable:
            self.iterable = copy(iterable)
        else:
            self.iterable = []



    def __len__(self):
        return len(self.iterable)

    def append(self, item):
        self.iterable.append(item)

    def pop(self, index= -1):
        return self.iterable.pop(index)

    def __getitem__(self, item):
        return self.iterable[(item % len(self.iterable))]



data = [1, 2, 3, 4, 5]
cycliclist = CyclicList(data)
data.extend([6, 7, 8, 9, 10])

count = 0
for item in cycliclist:
    if count == 10:
        break
    print(item, end=' ')
    count += 1