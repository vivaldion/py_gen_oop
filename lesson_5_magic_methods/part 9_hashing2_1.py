"""Реализуйте класс ColoredPoint, описывающий цветную точку на плоскости. При создании экземпляра класс должен принимать три аргумента в следующем порядке:

x — координата точки по оси
x
x
y — координата точки по оси
y
y
color — цвет точки
Класс ColoredPoint должен иметь три свойства:

x — свойство, доступное только для чтения, возвращающее координату точки по оси
x
x
y — свойство, доступное только для чтения, возвращающее координату точки по оси
y
y
color — свойство, доступное только для чтения, возвращающее цвет точки
Экземпляр класса ColoredPoint должен иметь следующее формальное строковое представление:

ColoredPoint(<координата x>, <координата y>, '<цвет точки>')
Также экземпляры класса ColoredPoint должны поддерживать между собой операции сравнения с помощью операторов == и !=. Две цветные точки считаются равными, если их цвета и координаты по обеим осям совпадают.

Наконец, при передаче экземпляра класса ColoredPoint в функцию hash() должно возвращаться его хеш-значение, вычисленное с помощью функции hash() на основе кортежа, первым элементом которого является координата точки по оси
x
x, вторым — координата точки по оси
y
y, третьим — цвет точки.

Примечание 1. Если объект, с которым происходит сравнение, некорректен, метод, реализующий операцию сравнения, должен вернуть константу NotImplemented.

Примечание 2. Никаких ограничений касательно реализации класса ColoredPoint нет, она может быть произвольной.

Примечание 3. Тестовые данные доступны по ссылкам:"""


class ColoredPoint:

    def __init__(self, x, y, color):
        self._x = x
        self._y = y
        self._color = color

    def __repr__(self):
        return f"ColoredPoint({self.x}, {self.y}, '{self.color}')"

    def __eq__(self, other):
        if isinstance(other, ColoredPoint):
            return tuple(self.__dict__.values()) == tuple(other.__dict__.values())
        return NotImplemented

    def __hash__(self):
        return hash(tuple(self.__dict__.values()))

    @property
    def x(self):
        return self._x

    @property
    def y(self):
        return self._y

    @property
    def color(self):
        return self._color


