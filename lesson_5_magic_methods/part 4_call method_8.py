"""Реализуйте декоратор @CountCalls, который считает количество вызовов декорируемой функции. Счетчик вызовов должен быть доступен по атрибуту calls.

Примечание 1. Не забывайте про то, что декоратор не должен поглощать возвращаемое значение декорируемой функции, а также должен уметь декорировать функции с произвольным количеством позиционных и именованных аргументов.

Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимый декоратор @CountCalls, но не код, вызывающий его.

Примечание 3. Тестовые данные доступны по ссылкам:"""


class CountCalls:
    def __init__(self):
        self.counter = 0

    def __call__(self, func):
        def wrapper(*args, **kwargs):
            return func(*args, **kwargs)
        CountCalls.counter += 1
        return self.


@CountCalls
def add(a, b):
    return a + b


print(add(1, 2))
print(add(2, 3))
print(add.calls)