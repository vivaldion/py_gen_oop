"""Реализуйте декоратор @CachedFunction, который кэширует вычисленные значения декорируемой функции. Кэш должен быть доступен по атрибуту cache и представлять собой словарь, ключом в котором является кортеж с аргументами, а значением — возвращаемое значение декорируемой функции при вызове с этими аргументами.

Примечание 1. Для однозначного кеширования гарантируется, что декорируемая функция принимает только позиционные аргументы.

Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимый декоратор @CachedFunction, но не код, вызывающий его.

Примечание 3. Тестовые данные доступны по ссылкам:"""


class CachedFunction:
    def __init__(self, func):
        self.cache = {}
        self.func = func

    def __call__(self, *args):
        if args in self.cache:
            return self.cache[args]
        else:
            self.cache[args] = self.func(*args)
            return self.cache[args]